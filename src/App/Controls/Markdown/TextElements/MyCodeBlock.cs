// Copyright (c) Reader Copilot. All rights reserved.
// <auto-generated />

using System.Text;
using Markdig.Syntax;
using Microsoft.UI.Xaml.Documents;
using Microsoft.UI.Xaml.Media;

namespace Bili.Copilot.App.Controls.Markdown.TextElements;

internal class MyCodeBlock : IAddChild
{
    private readonly CodeBlock _codeBlock;
    private Paragraph _paragraph;
    private readonly MarkdownConfig _config;

    public TextElement TextElement => _paragraph;

    public MyCodeBlock(CodeBlock codeBlock, MarkdownConfig config)
    {
        _codeBlock = codeBlock;
        _config = config;
        _paragraph = new Paragraph();
        var container = new InlineUIContainer();
        var border = new Border
        {
            Background = config.Themes.CodeBlockBackground,
            Padding = _config.Themes.Padding,
            Margin = new Thickness(0,8,0,8),
            CornerRadius = _config.Themes.CornerRadius,
            HorizontalAlignment = HorizontalAlignment.Stretch,
        };
        var richTextBlock = new RichTextBlock();
        richTextBlock.Foreground = config.Themes.CodeBlockForeground;

        if (codeBlock is FencedCodeBlock fencedCodeBlock)
        {
            var formatter = new ColorCode.RichTextBlockFormatter(Extensions.GetOneDarkProStyle());
            var stringBuilder = new StringBuilder();

            // go through all the lines backwards and only add the lines to a stack if we have encountered the first non-empty line
            var lines = fencedCodeBlock.Lines.Lines;
            var stack = new Stack<string>();
            var encounteredFirstNonEmptyLine = false;
            if (lines != null)
            {
                for (var i = lines.Length - 1; i >= 0; i--)
                {
                    var line = lines[i];
                    if (string.IsNullOrWhiteSpace(line.ToString()) && !encounteredFirstNonEmptyLine)
                    {
                        continue;
                    }

                    encounteredFirstNonEmptyLine = true;
                    stack.Push(line.ToString());
                }

                // append all the lines in the stack to the string builder
                while (stack.Count > 0)
                {
                    stringBuilder.AppendLine(stack.Pop());
                }
            }

            formatter.FormatRichTextBlock(stringBuilder.ToString().Trim(), fencedCodeBlock.ToLanguage(), richTextBlock);
        }
        else
        {
            foreach (var line in codeBlock.Lines.Lines)
            {
                var paragraph = new Paragraph();
                var lineString = line.ToString();
                if (!string.IsNullOrWhiteSpace(lineString))
                {
                    paragraph.Inlines.Add(new Run() { Text = lineString });
                }

                richTextBlock.Blocks.Add(paragraph);
            }
        }

        border.Child = richTextBlock;
        container.Child = border;
        _paragraph.Inlines.Add(container);
    }

    public void AddChild(IAddChild child)
    {
    }
}
