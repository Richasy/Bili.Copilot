import{_ as i,c as a,a0 as t,o as n}from"./chunks/framework.CoDf8mVe.js";const E=JSON.parse('{"title":"会话预设","description":"","frontmatter":{},"headers":[],"relativePath":"session-preset.md","filePath":"session-preset.md","lastUpdated":null}'),e={name:"session-preset.md"};function l(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="会话预设" tabindex="-1">会话预设 <a class="header-anchor" href="#会话预设" aria-label="Permalink to &quot;会话预设&quot;">​</a></h1><p>会话预设的概念类似 Ollama 的 <a href="https://github.com/ollama/ollama/blob/main/docs/modelfile.md" target="_blank" rel="noreferrer">Modelfile</a>。它用于创建一个会话模板，你可以在这个预设的基础上快速创建会话。</p><h2 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h2><p>会话预设（Session Preset）采用 JSON 格式定义。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OpenAI Gpt4 示例&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;provider&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;temperature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你是一个专业的 C# 工程师&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td><code>name</code></td><td>string</td><td>是</td><td>预设的名称，它也将作为标识符存在，所以不能创建同名预设</td></tr><tr><td><code>model</code></td><td>string</td><td>是</td><td>指定的对话模型 ID，在线模型需要填写其模型 ID，本地模型则是转义后的绝对路径（该本地模型必须预先导入应用）</td></tr><tr><td><code>provider</code></td><td>string</td><td>是</td><td>模型所属的服务，具体的服务 ID 参考 <a href="./services">支持的服务</a></td></tr><tr><td><code>system</code></td><td>string</td><td>否</td><td>系统提示词，可以用于指定 AI 扮演的角色等</td></tr><tr><td><code>stream</code></td><td>boolean</td><td>否</td><td>是否启用流式传输，默认为 <code>True</code></td></tr><tr><td><code>max_rounds</code></td><td>int</td><td>否</td><td>最大对话轮次。<br><em>一问一答称之为一轮</em>，默认为 <code>0</code>，表示不限轮次。<br><em>假如该值为 <code>1</code>，则每次只会发送用户的问题而不引入前文；为 <code>2</code> 则只会引入前一轮对话，依此类推</em></td></tr><tr><td><code>messages</code></td><td>array&lt;<a href="#chatmessage">ChatMessage</a>&gt;</td><td>否</td><td>预定义的会话记录</td></tr><tr><td><code>parameters</code></td><td>object</td><td>否</td><td>会话参数是一个动态对象，它具体的值由 <code>provider</code> 决定，所以关于它的属性及定义，请查阅 <a href="./services">支持的服务</a>，对于本地模型特殊的指令模板，请查看 <a href="#模板指令">模板指令</a></td></tr><tr><td><code>stop_sequences</code></td><td>array&lt;string&gt;</td><td>否</td><td>终止令牌序列</td></tr><tr><td><code>filter_chars</code></td><td>array&lt;string&gt;</td><td>否</td><td>在模型生成内容后要过滤掉的文本</td></tr></tbody></table><h2 id="消息类型" tabindex="-1">消息类型 <a class="header-anchor" href="#消息类型" aria-label="Permalink to &quot;消息类型&quot;">​</a></h2><h3 id="chatmessage" tabindex="-1">ChatMessage <a class="header-anchor" href="#chatmessage" aria-label="Permalink to &quot;ChatMessage&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;从现在开始，你叫小明。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一种最为基础的写法，确定消息的发送方与内容。</p><p>该写法等同于：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;从现在开始，你叫小明。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为什么需要有这两种定义方式？因为后一种可以支持图片以及未来可能的多媒体输入。</p><p>比如包含图片的消息定义如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.example.com/example.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auto&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解析这张图片&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完整的消息结构体定义如下：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td><code>role</code></td><td>string</td><td>是</td><td>表示消息发送者的身份，可选值为 <code>user</code> 和 <code>assistant</code></td></tr><tr><td><code>content</code></td><td>string 或 array&lt;<a href="#chatmessagecontent">ChatMessageContent</a>&gt;</td><td>是</td><td>表示消息的具体内容</td></tr><tr><td><code>time</code></td><td>long/int64</td><td>否</td><td>发送消息的 Unix 时间戳（秒），可以不填</td></tr></tbody></table><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p><strong>role</strong> 支持 <code>system</code> 角色，但系统提示词应尽量写在预设的专用属性 <code>system</code> 而不是混入消息列表中。</p></div><h4 id="chatmessagecontent" tabindex="-1">ChatMessageContent <a class="header-anchor" href="#chatmessagecontent" aria-label="Permalink to &quot;ChatMessageContent&quot;">​</a></h4><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td>string</td><td>是</td><td>表示消息内容的类型，可选值为 <code>text</code> 和 <code>image</code></td></tr><tr><td><code>text</code></td><td>string</td><td>是</td><td>- 在 type 为 text 时，该属性表示消息的文本内容<br>- 在 type 为 image 时，该属性表示图片的链接或者是 base64 字符串（如果模型支持）</td></tr><tr><td><code>detail</code></td><td>string</td><td>否</td><td>图片解析细节，可选值为 <code>auto</code>, <code>high</code> 和 <code>low</code>，需要模型服务支持该参数</td></tr></tbody></table><h2 id="模板指令" tabindex="-1">模板指令 <a class="header-anchor" href="#模板指令" aria-label="Permalink to &quot;模板指令&quot;">​</a></h2><p>在创建本地模型的预设时，会话参数中存在以下属性：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td><code>system_template</code></td><td>string</td><td>否</td><td>系统指令的模板字符串</td></tr><tr><td><code>user_template</code></td><td>string</td><td>否</td><td>用户指令的模板字符串</td></tr><tr><td><code>assistant_template</code></td><td>string</td><td>否</td><td>助理/机器人/模型回复指令的模板字符串</td></tr><tr><td><code>end_template</code></td><td>string</td><td>否</td><td>表示当聊天记录被转换成上下文发送给模型时追加的内容</td></tr></tbody></table><p>这些是特殊的 <strong><code>模板指令</code></strong>。</p><p>大模型在进行微调时通常都会以特定的指令模板进行训练，比如用特定的令牌（Token）表示特定的角色，或者表示一段文本结束。</p><p>对于没有特别指定模板指令的本地模型，应用会使用默认的格式来组织 Prompt，样例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>System: 你是一个专业的助手。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>User: 你好。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Assistant: 你好，有什么我可以帮助你的？</span></span>
<span class="line"><span></span></span>
<span class="line"><span>User: 写一首关于鸡，黑子的诗。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Assistant:</span></span></code></pre></div><p>在这个示例中，<code>System:</code>, <code>User:</code>, <code>Assistant:</code> 就是简单的指令，如果把这套指令写在预设中，那就是：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;system_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;System: {{system}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;user_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User: {{user}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;assistant_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Assistant: {{assistant}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;end_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Assistant: &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><strong>为什么要有 <code>end_template</code>？</strong><br> 我们知道，聊天模型本质上是文本生成模型针对聊天场景（问答）特调的模型。<br> 所以在组织内容时，通常我们会留一个后缀，以便模型在此基础上续写文本，这也就是上面示例中结尾的 <code>Assistant:</code>，即 <code>end_template</code></p></div><h3 id="使用不同的指令" tabindex="-1">使用不同的指令 <a class="header-anchor" href="#使用不同的指令" aria-label="Permalink to &quot;使用不同的指令&quot;">​</a></h3><p>默认指令能覆盖基本场景，但不同模型之间并不会共用一套标准的聊天指令</p><p>让我们以 <a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf#chat-format" target="_blank" rel="noreferrer">microsoft/Phi-3-mini-4k-instruct-gguf</a> 举例。</p><p>在文档中，微软提到我们调用模型时提供的 Prompt 应具备下面的结构</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;|user|&gt;</span></span>
<span class="line"><span>{{user_question}}&lt;|end|&gt;</span></span>
<span class="line"><span>&lt;|assistant|&gt;</span></span>
<span class="line"><span>{{assistant_response}}&lt;|end|&gt;</span></span>
<span class="line"><span>&lt;|user|&gt;</span></span>
<span class="line"><span>{{user_question}}&lt;|end|&gt;</span></span>
<span class="line"><span>&lt;|assistant|&gt;</span></span></code></pre></div><p>首先，根据 <a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf/discussions/11" target="_blank" rel="noreferrer">讨论</a>，它不支持 <code>System</code> 角色。</p><p>其次，观察这个 Prompt 结构，我们会发现它具备更结构化的特征。</p><p>而基于此结构训练出的模型对于默认指令的支持并不好，故而我们需要自定义指令模板，其定义如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;system_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;|user|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{system}}&lt;|end|&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;user_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;|user|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{user}}&lt;|end|&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;assistant_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;|assistant|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{assistant}}&lt;|end|&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;end_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;|assistant|&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中，<span><code>{{system}}</code></span>, <span><code>{{user}}</code></span>, <span><code>{{assistant}}</code></span> 这些属于各自属性下的占位符，它们最终会被替换成对应的文本内容。</p><h2 id="从-modelfile-迁移" tabindex="-1">从 Modelfile 迁移 <a class="header-anchor" href="#从-modelfile-迁移" aria-label="Permalink to &quot;从 Modelfile 迁移&quot;">​</a></h2><p>会话预设这个功能是受了 Ollama 的 <a href="https://github.com/ollama/ollama/blob/main/docs/modelfile.md" target="_blank" rel="noreferrer">Modelfile</a> 启发，所以它们的原理基本一致。</p><p>但是在处理 <code>TEMPLATE</code> 时，Ollama 使用了基于 Go 语言模板的语法，这并不够通用（至少我无法在 C# 中直接使用），所以我选择了对我来说更方便的 JSON。</p><p>如果你打算将 Modelfile 中的 TEMPLATE 迁移到会话预设中，以下是一个示例。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>还是以 <a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf#chat-format" target="_blank" rel="noreferrer">microsoft/Phi-3-mini-4k-instruct-gguf</a> 举例。</p><p>微软提供了一个 <a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf/blob/main/Modelfile_q4" target="_blank" rel="noreferrer">Modelfile 样例</a>：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FROM .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Phi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mini</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">4k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instruct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q4.gguf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TEMPLATE </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;&lt;s&gt;{{ if .Prompt }}&lt;|user|&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{ .Prompt }}&lt;|end|&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{ end }}&lt;|assistant|&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{ .Response }}&lt;|end|&gt;&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PARAMETER stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endoftext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PARAMETER stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PARAMETER num_ctx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4096</span></span></code></pre></div><p>转换成会话预设就是：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;E:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">to</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">model</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Phi-3-mini-4k-instruct-q4.gguf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Phi3 Q4 预设&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;provider&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;stop_sequences&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&lt;|endoftext|&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&lt;|end|&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;max_tokens&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;user_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;|user|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{user}}&lt;|end|&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;assistant_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;|assistant|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{assistant}}&lt;|end|&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,50)]))}const g=i(e,[["render",l]]);export{E as __pageData,g as default};
