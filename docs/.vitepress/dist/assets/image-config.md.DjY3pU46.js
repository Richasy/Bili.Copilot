import{_ as t}from"./chunks/azure-oai-secret.BDDarwfJ.js";import{_ as a}from"./chunks/azure-model-deploy-image.B2X_hGt4.js";import{_ as r,c as o,a0 as c,o as d}from"./chunks/framework.CoDf8mVe.js";const I=JSON.parse('{"title":"文生图服务配置","description":"","frontmatter":{},"headers":[],"relativePath":"image-config.md","filePath":"image-config.md","lastUpdated":null}'),p={name:"image-config.md"};function n(i,e,l,s,h,u){return d(),o("div",null,e[0]||(e[0]=[c('<h1 id="文生图服务配置" tabindex="-1">文生图服务配置 <a class="header-anchor" href="#文生图服务配置" aria-label="Permalink to &quot;文生图服务配置&quot;">​</a></h1><p>哔哩助理支持多种文生图服务，请根据子标题索引，跳转到你想要配置的服务段落查看。</p><h2 id="open-ai" tabindex="-1">Open AI <a class="header-anchor" href="#open-ai" aria-label="Permalink to &quot;Open AI&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://platform.openai.com/docs/api-reference/images/create" target="_blank" rel="noreferrer">https://platform.openai.com/docs/api-reference/images/create</a></td></tr><tr><td>API 令牌</td><td><a href="https://platform.openai.com/account/api-keys" target="_blank" rel="noreferrer">https://platform.openai.com/account/api-keys</a></td></tr></tbody></table><p>Open AI 的配置相对来说很简单，只要你将 API Key 填入设置中的 <code>访问密钥</code> 即可。</p><h3 id="代理与-api-兼容" tabindex="-1">代理与 API 兼容 <a class="header-anchor" href="#代理与-api-兼容" aria-label="Permalink to &quot;代理与 API 兼容&quot;">​</a></h3><p>现在 Open AI 的接口数据结构几乎成为了一种通用标准，有很多的 AI 服务在暴露接口时为了更易用，都会选择以 Open AI 相似的接口地址和数据结构发布。这就是所谓的 <code>Open AI 兼容接口</code>。</p><p>如果你正在使用的 AI 服务不在哔哩助理的支持列表中，但又恰好使用了 Open AI 兼容接口，那么你就可以把该服务的地址写入 Open AI 设置区块的 <code>终结点（API）</code> 文本框中。</p><p>当然，还有另一种使用场景。</p><p>由于 Open AI 在部分国家或地区不可用，用户会尝试以代理服务器的方式使用 Open AI 服务，比如 <a href="https://www.openai-proxy.com/" target="_blank" rel="noreferrer">Open AI API Proxy</a>。</p><p>你依然需要使用自己的 API 密钥，但不直接访问 OpenAI 服务器，而是交由代理服务进行访问，从而避免被墙或者封号。</p><p>你可以将对应的服务地址填入 <code>终结点（API）</code> 中，以实现 API 代理功能。比如上面的代理服务，需要填入的地址就是：<code>https://api.openai-proxy.com/v1</code></p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>上文提到的 Open AI API Proxy 仅用作说明该使用场景，开发者不对其安全性负责，使用者需要自行辨别服务的可靠性并为之负责。</p></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>对于代理来说，版本号通常是有必要的，比如 <code>https://api.openai-proxy.com/v1</code> 中的 <code>v1</code>。 因为 API 输入框还需要兼容其它 API 服务，有些服务并不见得会在请求路径中使用版本号。</p></div><h2 id="azure-open-ai" tabindex="-1">Azure Open AI <a class="header-anchor" href="#azure-open-ai" aria-label="Permalink to &quot;Azure Open AI&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://learn.microsoft.com/azure/ai-services/openai/overview" target="_blank" rel="noreferrer">https://learn.microsoft.com/azure/ai-services/openai/overview</a></td></tr><tr><td>Azure 服务</td><td><a href="https://azure.microsoft.com/en-us/products/ai-services/openai-service" target="_blank" rel="noreferrer">https://azure.microsoft.com/en-us/products/ai-services/openai-service</a></td></tr></tbody></table><p>Microsoft 与 Open AI 的关系较为特殊，有种 Open AI 特许经销商的感觉，所以你能够在 Azure 这个云服务平台创建 Open AI 资源，并按需部署 <code>Dall·E 3</code> 等 Open AI 模型。</p><p>虽然它们的模型一致，但是网络请求格式却不尽相同，所需要的配置项也不一样。</p><p>当你部署了 Open AI 资源后，你能在资源页面的 <code>资源管理</code> -&gt; <code>密钥和终结点</code> 中找到所需的密钥（两个密钥任选其一即可）与终结点。</p><div style="max-width:500px;"><p><img src="'+t+'" alt="密钥与终结点"></p></div><p>将对应的值填入应用设置中。</p><p>你可能会对 API 版本感到好奇，这里是 <a href="https://learn.microsoft.com/azure/ai-services/openai/reference#completions" target="_blank" rel="noreferrer">文档</a>，通常情况下不需要改动。</p><h3 id="添加自定义模型" tabindex="-1">添加自定义模型 <a class="header-anchor" href="#添加自定义模型" aria-label="Permalink to &quot;添加自定义模型&quot;">​</a></h3><p>Azure Open AI 相较于 Open AI，最大的不同在于你需要手动部署需要的模型。</p><p>在应用中，Azure Open AI 不提供预置模型，仅仅填写密钥和终结点并不能让配置生效，我们还需要创建自定义模型。</p><p>在 <a href="https://" target="_blank" rel="noreferrer">Azure OpenAI Studio</a> 中，你可以从模型库里部署特定的模型。</p><p>每个模型有自己的 Id，比如 Dall·E 3 的 Id 就是 dall-e-3。</p><div style="max-width:420px;"><p><img src="'+a+'" alt="Azure 模型部署"></p></div><p>在你部署模型时，Azure 会要求你提供 <strong>部署名</strong>，这个很重要，我们通过 API 与服务进行交互式，模型的标识符不是模型 ID，而是你部署模型时的部署名。</p><p>我推荐在部署模型时尽量使用和模型 ID 相同的部署名，以减少歧义。</p><p>在创建自定义模型时，你需要提供文生图模型支持的图片尺寸，对于 Dall·E 3 来说，它支持以下尺寸：</p><ul><li>1024x1024</li><li>1792x1024</li><li>1024x1792</li></ul><h2 id="千帆模型平台-sd-xl-文心" tabindex="-1">千帆模型平台 SD_XL（文心） <a class="header-anchor" href="#千帆模型平台-sd-xl-文心" aria-label="Permalink to &quot;千帆模型平台 SD_XL（文心）&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Klkqubb9w" target="_blank" rel="noreferrer">https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Klkqubb9w</a></td></tr><tr><td>API 令牌</td><td><a href="https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application" target="_blank" rel="noreferrer">https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application</a></td></tr></tbody></table><p>千帆大模型平台由百度云构建，内部包含多个画图模型，我们目前使用 Stable-Diffusion-XL。</p><p>在千帆大模型平台创建应用后，将 <code>API Key</code> 填入 <code>访问密钥</code>，将 <code>Secret Key</code> 填入 <code>密文（Secret）</code> 即可。</p><h2 id="腾讯混元" tabindex="-1">腾讯混元 <a class="header-anchor" href="#腾讯混元" aria-label="Permalink to &quot;腾讯混元&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://cloud.tencent.com/document/product/1729/106530" target="_blank" rel="noreferrer">https://cloud.tencent.com/document/product/1729/106530</a></td></tr><tr><td>API 令牌</td><td><a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noreferrer">https://console.cloud.tencent.com/cam/capi</a></td></tr></tbody></table><p>混元生图模型托管在腾讯云上，你需要在 <a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noreferrer">API 密钥管理</a> 中创建一个密钥。</p><p>需要注意的是，由于安全限制，密钥的 <code>Secret Key</code> 仅在创建密钥时可见。</p><p>在应用中，设置项的对应关系是：</p><ul><li><code>Secret Key</code> -&gt; <code>访问密钥</code></li><li><code>Secret Id</code> -&gt; <code>密文（Secret）</code></li></ul><h2 id="讯飞星火" tabindex="-1">讯飞星火 <a class="header-anchor" href="#讯飞星火" aria-label="Permalink to &quot;讯飞星火&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://www.xfyun.cn/doc/spark/ImageGeneration.html" target="_blank" rel="noreferrer">https://www.xfyun.cn/doc/spark/ImageGeneration.html</a></td></tr><tr><td>API 令牌</td><td><a href="https://console.xfyun.cn/services/tti" target="_blank" rel="noreferrer">https://console.xfyun.cn/services/tti</a></td></tr></tbody></table><p>在使用讯飞星火推出的图片生成服务前，你需要在 <a href="https://www.xfyun.cn/" target="_blank" rel="noreferrer">讯飞开放平台</a> 先注册一个应用，然后开通对应的模型服务。</p><p>未开通的模型将无法使用。</p><p>注册后，你能在 <code>图片生成</code> 的模型页中找到 <code>服务接口认证信息</code>，这些是你需要填入应用中的设置项，具体对应关系如下：</p><ul><li><code>APPID</code> -&gt; <code>应用 ID</code></li><li><code>APISecret</code> -&gt; <code>密文（Secret）</code></li><li><code>APIKey</code> -&gt; <code>访问密钥</code></li></ul>',48)]))}const A=r(p,[["render",n]]);export{I as __pageData,A as default};
